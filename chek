</code> для поля <code>message</code> пуст, потому что ему данные переданы не были. Получить доступ к ошибке валидации для поля <code>message</code> можно следующим образом:</p><pre class=" language-py"><code class="prism language-py"><span class="token operator">>></span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> Template<span class="token punctuation">(</span><span class="token string">"{% for error in form.message.errors %}{{ error }}{% endfor %}"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>render<span class="token punctuation">(</span>form<span class="token operator">=</span>form<span class="token punctuation">)</span>
<span class="token string">'This field is required.'</span>
<span class="token operator">>></span><span class="token operator">></span>
</code></pre><p>Как вариант, <code>form.errors</code> можно использовать, чтобы перебрать все ошибки валидации за раз.</p><noindex><div class="clear"></div><div id="yandex_rtb_R-A-1311574-7"></div><div class="clear"></div><br></noindex><pre class=" language-py"><code class="prism language-py"><span class="token operator">>></span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> s  <span class="token operator">=</span><span class="token triple-quoted-string string">"""\
... {% for field_name in form.errors %}\
... {% for error in form.errors[field_name] %}\
... <li>{{ field_name }}: {{ error }}</li>
... {% endfor %}\
... {% endfor %}\
... """</span>
<span class="token operator">>></span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> Template<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>render<span class="token punctuation">(</span>form<span class="token operator">=</span>form<span class="token punctuation">)</span>
'<span class="token operator"><</span>li<span class="token operator">></span>csrf_token<span class="token punctuation">:</span> The CSRF token <span class="token keyword">is</span> missing<span class="token punctuation">.</span><span class="token operator"><</span><span class="token operator">/</span>li<span class="token operator">></span>\n
<span class="token operator"><</span>li<span class="token operator">></span>message<span class="token punctuation">:</span> This field <span class="token keyword">is</span> required<span class="token punctuation">.</span><span class="token operator"><</span><span class="token operator">/</span>li<span class="token operator">></span>\n'
<span class="token operator">>></span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span>
</code></pre><p>Стоит обратить внимание, что ошибки csfr-токена нет, потому что запрос был отправлен без токена. Отрендерить поле csfr можно как и любое другое поле:</p><pre class=" language-py"><code class="prism language-py"><span class="token operator">>></span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span>  Template<span class="token punctuation">(</span><span class="token string">"{{ form.csrf_token() }}"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>render<span class="token punctuation">(</span>form<span class="token operator">=</span>form<span class="token punctuation">)</span>
<span class="token string">'<input id="csrf_token" name="csrf_token" type="hidden" value="IjZjOTBkOWM4ZmQ0MGMzZTY3NDc3ZTNiZDIxZTFjNDAzMGU1YzEwOTYi.DQlFlA.GQ-PrxsCJkQfoJ5k6i5YfZMzC7k">'</span>
<span class="token operator">>></span><span class="token operator">></span>
</code></pre><p>Рендеринг полей один из одним может занять много времени, особенно если их несколько. Для таких случаев используется цикл.</p><h3 id="рендеринг-полей-с-помощью-цикла"><span class="ez-toc-section" id="%D0%A0%D0%B5%D0%BD%D0%B4%D0%B5%D1%80%D0%B8%D0%BD%D0%B3-%D0%BF%D0%BE%D0%BB%D0%B5%D0%B9-%D1%81-%D0%BF%D0%BE%D0%BC%D0%BE%D1%89%D1%8C%D1%8E-%D1%86%D0%B8%D0%BA%D0%BB%D0%B0"></span>Рендеринг полей с помощью цикла<span class="ez-toc-section-end"></span></h3><p>Следующий код демонстрирует, как можно отрендерить поля с помощью <a href="https://pythonru.com/osnovy/sintaksis-vozmozhnosti-i-podvodnye-kamni-cikla-for-v-python-3" data-wpel-link="internal" target="_self" rel="noopener">цикла for</a>.</p><pre class=" language-py"><code class="prism language-py"><span class="token operator">>></span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> <span class="token triple-quoted-string string">"""\
...     <div>
... 	    {{ form.csrf_token }}
... 	</div>
... {% for field in form if field.name != 'csrf_token' %}
... 	<div>
... 	    {{ field.label() }}
... 	    {{ field() }}
... 	    {% for error in field.errors %}
... 		<div class="error">{{ error }}</div>
... 	    {% endfor %}
... 	</div>
... {% endfor %}
... """</span>
<span class="token operator">>></span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>Template<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span>render<span class="token punctuation">(</span>form<span class="token operator">=</span>form<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token operator"><</span>div<span class="token operator">></span>
	<span class="token operator"><</span><span class="token builtin">input</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"csrf_token"</span> name<span class="token operator">=</span><span class="token string">"csrf_token"</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"hidden"</span>  value<span class="token operator">=</span><span class="token string">"IjZjOTBkOWM4ZmQ0MGMzZTY3NDc3ZTNiZDIxZTFjNDAzMGU1YzEwOTYi.DQlFlA.GQ-PrxsCJkQfoJ5k6i5YfZMzC7k"</span><span class="token operator">></span>

    <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>

    <span class="token operator"><</span>div<span class="token operator">></span>
	<span class="token operator"><</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"name"</span><span class="token operator">></span>Name<span class="token punctuation">:</span> <span class="token operator"><</span><span class="token operator">/</span>label<span class="token operator">></span>
	<span class="token operator"><</span><span class="token builtin">input</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"name"</span> name<span class="token operator">=</span><span class="token string">"name"</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"text"</span> value<span class="token operator">=</span><span class="token string">"spike"</span><span class="token operator">></span>

    <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>

    <span class="token operator"><</span>div<span class="token operator">></span>
	<span class="token operator"><</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"email"</span><span class="token operator">></span>Email<span class="token punctuation">:</span> <span class="token operator"><</span><span class="token operator">/</span>label<span class="token operator">></span>
	<span class="token operator"><</span><span class="token builtin">input</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"email"</span> name<span class="token operator">=</span><span class="token string">"email"</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"text"</span>  value<span class="token operator">=</span><span class="token string">"spike@mail.com"</span><span class="token operator">></span>

    <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>

    <span class="token operator"><</span>div<span class="token operator">></span>
	<span class="token operator"><</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">></span>Message<span class="token operator"><</span><span class="token operator">/</span>label<span class="token operator">></span>
	<span class="token operator"><</span>textarea <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"message"</span> name<span class="token operator">=</span><span class="token string">"message"</span><span class="token operator">></span><span class="token operator"><</span><span class="token operator">/</span>textarea<span class="token operator">></span>

	    <span class="token operator"><</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"error"</span><span class="token operator">></span>This field <span class="token keyword">is</span> required<span class="token punctuation">.</span><span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>

    <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>

    <span class="token operator"><</span>div<span class="token operator">></span>
	<span class="token operator"><</span>label <span class="token keyword">for</span><span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span>Submit<span class="token operator"><</span><span class="token operator">/</span>label<span class="token operator">></span>
	<span class="token operator"><</span><span class="token builtin">input</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"submit"</span> name<span class="token operator">=</span><span class="token string">"submit"</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token string">"submit"</span>  value<span class="token operator">=</span><span class="token string">"Submit"</span><span class="token operator">></span>

    <span class="token operator"><</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span>
<span class="token operator">>></span><span class="token operator">></span>
</code></pre><p>Важно заметить, что вне зависимости от используемого метода нужно вручную добавлять тег <code><form></code>, чтобы обернуть поля формы.</p><p>Теперь, зная как создавать, поверять и рендерить формы, можно использовать полученные знания для создания реальных форм.</p><p>Вначале нужно создать шаблон <code>contact.html</code> со следующим кодом:</p><pre class=" language-django"><code class="prism language-django"><span class="token doctype"><!DOCTYPE html></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"><</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"><</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation"><</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"><</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation"><</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>

    <span class="token property">{{ <span class="token variable">form</span><span class="token punctuation">.</span><span class="token keyword">csrf_token</span><span class="token punctuation">(</span><span class="token punctuation">)</span> }}</span>

    <span class="token property">{% <span class="token keyword">for</span> <span class="token variable">field</span> <span class="token keyword">in</span> <span class="token variable">form</span> <span class="token keyword">if</span> <span class="token variable">field</span><span class="token punctuation">.</span><span class="token variable">name</span> <span class="token operator">!=</span> <span class="token string">"csrf_token"</span> %}</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation"><</span>p</span><span class="token punctuation">></span></span><span class="token property">{{ <span class="token variable">field</span><span class="token punctuation">.</span><span class="token variable">label</span><span class="token punctuation">(</span><span class="token punctuation">)</span> }}</span><span class="token tag"><span class="token tag"><span class="token punctuation"></</span>p</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation"><</span>p</span><span class="token punctuation">></span></span><span class="token property">{{ <span class="token variable">field</span> }}</span>
	    <span class="token property">{% <span class="token keyword">for</span> <span class="token variable">error</span> <span class="token keyword">in</span> <span class="token variable">field</span><span class="token punctuation">.</span><span class="token variable">errors</span> %}</span>
		<span class="token property">{{ <span class="token variable">error</span> }}</span>
	    <span class="token property">{% <span class="token keyword">endfor</span> %}</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>p</span><span class="token punctuation">></span></span>
    <span class="token property">{% <span class="token keyword">endfor</span> %}</span>

<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>form</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation"></</span>html</span><span class="token punctuation">></span></span>
</code></pre><p>Единственный недостающий кусочек пазла — функция представления, которая будет создана далее.</p><h2 id="работа-с-подтверждением-формы"><span class="ez-toc-section" id="%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0-%D1%81-%D0%BF%D0%BE%D0%B4%D1%82%D0%B2%D0%B5%D1%80%D0%B6%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5%D0%BC-%D1%84%D0%BE%D1%80%D0%BC%D1%8B"></span>Работа с подтверждением формы<span class="ez-toc-section-end"></span></h2><p>Откроем <code>main2.py</code>, чтобы добавить следующий код после функции представления <code>login()</code>.</p><pre class=" language-py"><code class="prism language-py"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span>  url_for
<span class="token keyword">from</span> flask_script <span class="token keyword">import</span> Manager<span class="token punctuation">,</span> Command<span class="token punctuation">,</span> Shell
<span class="token keyword">from</span> forms <span class="token keyword">import</span> ContactForm
<span class="token comment">#...</span>
@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/contact/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'post'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">contact</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    form <span class="token operator">=</span> ContactForm<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> form<span class="token punctuation">.</span>validate_on_submit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	name <span class="token operator">=</span> form<span class="token punctuation">.</span>name<span class="token punctuation">.</span>data
	email <span class="token operator">=</span> form<span class="token punctuation">.</span>email<span class="token punctuation">.</span>data
	message <span class="token operator">=</span> form<span class="token punctuation">.</span>message<span class="token punctuation">.</span>data
	<span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
	<span class="token comment"># здесь логика базы данных</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nData received. Now redirecting ..."</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'contact'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'contact.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span>
<span class="token comment">#...</span>
</code></pre><p>В 7 строке создается объект формы. На 8 строке проверяется значение, которое вернул метод <code>validate_on_submit()</code> для исполнения кода внутри инструкции if.</p><p>Почему используется <code>validate_on_sumbit()</code>, а не <code>validate()</code>, как это было в консоли?</p><p><code>validate()</code> всего лишь проверяет, корректны ли данные формы. Он не проверяет, был ли запрос отправлен с помощью метода POST. Это значит, что если использовать метод <code>validate()</code>, тогда запрос GET к <code>/contact/</code> запустит форму проверки, а пользователь увидит ошибки валидации. Вообще процедура проверки запускается только в том случае, если данные были отправлены с помощью метода POST. В противном случае вернется <code>False</code>. Метод <code>validate_on_submit()</code> вызывает метод <code>validate()</code> внутри себя. Также нужно обратить внимание, что при создании экземпляра объекта формы данные не передаются, потому что когда форма отправляется с помощью запроса POST, WTForm считывает данные формы из атрибута <code>request.form</code>.</p><p>Поля формы, определенные в классе формы становятся атрибутами объекта формы. Чтобы получить доступ к данным поля используется атрибут <code>data</code> поля формы:</p><pre class=" language-py"><code class="prism language-py">form<span class="token punctuation">.</span>name<span class="token punctuation">.</span>data  <span class="token comment"># доступ к данным в поле name.</span>
form<span class="token punctuation">.</span>email<span class="token punctuation">.</span>data  <span class="token comment"># доступ к данным в поле email.</span>
</code></pre><p>Чтобы получить доступ ко всем данные формы сразу нужно использовать атрибут <code>data</code> к объекту формы:</p><pre class=" language-py"><code class="prism language-py">form<span class="token punctuation">.</span>data  <span class="token comment"># доступ ко всем данным</span>
</code></pre><p>Если использовать запрос GET при посещении <code>/contact/</code>, метод <code>validate_on_sumbit()</code> вернет <code>False</code>. Код внутри if будет пропущен, а пользователь получит пустую HTML-форму.</p><p>Когда форма отправляется с помощью запроса POST, <code>validate_on_sumbit()</code> возвращает <code>True</code>, предполагая, что данные верны. Вызовы <code>print()</code> внутри блока if выведут данные, введенные пользователем, а функция <code>redirect()</code> перенаправит пользователя на страницу <code>/contact/</code>. С другой стороны, если <code>validate_on_sumbit()</code> вернет <code>False</code>, исполнение инструкций внутри тела if будет пропущено, и появится сообщение об ошибке валидации.</p><p>Если сервер не запущен, его нужно запустить и открыть <code>https://localhost:5000/contact/</code>. Появится следующая контактная форма:</p><p><img width="336" height="418" decoding="async" class="aligncenter" title="контактная форма во Flask" src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20336%20418'%3E%3C/svg%3E" alt="контактная форма во Flask" data-lazy-src="https://pythonru.com/wp-content/uploads/2019/05/kontaktnaya-forma-vo-flask.png" /><noscript><img width="336" height="418" decoding="async" class="aligncenter" title="контактная форма во Flask" src="https://pythonru.com/wp-content/uploads/2019/05/kontaktnaya-forma-vo-flask.png" alt="контактная форма во Flask" /></noscript></p><p>Если попробовать нажать Submit, не вводя данных, появятся следующие сообщения об ошибках валидации:</p><p><img width="340" height="421" decoding="async" class="aligncenter" title="ошибка валидации формы во Flask" src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20340%20421'%3E%3C/svg%3E" alt="ошибка валидации формы во Flask" data-lazy-src="https://pythonru.com/wp-content/uploads/2019/05/oshibka-validacii-forma-vo-flask.png" /><noscript><img width="340" height="421" decoding="async" class="aligncenter" title="ошибка валидации формы во Flask" src="https://pythonru.com/wp-content/uploads/2019/05/oshibka-validacii-forma-vo-flask.png" alt="ошибка валидации формы во Flask" /></noscript></p><p>Теперь можно ввести определенные данные в поля Name и Message и некорректные данные в поле Email, и попробовать отправить форму снова.<br /> <img width="328" height="419" decoding="async" class="aligncenter" title="ошибка валидации email во Flask" src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20328%20419'%3E%3C/svg%3E" alt="ошибка валидации email во Flask" data-lazy-src="https://pythonru.com/wp-content/uploads/2019/05/oshibka-validacii-email-vo-flask.png" /><noscript><img width="328" height="419" decoding="async" class="aligncenter" title="ошибка валидации email во Flask" src="https://pythonru.com/wp-content/uploads/2019/05/oshibka-validacii-email-vo-flask.png" alt="ошибка валидации email во Flask" /></noscript></p><p>Нужно обратить внимание, что все поля содержат данные из прошлого запроса.</p><p>Теперь можно ввести корректный email в поле Email и нажать Submit. Теперь проверка пройдет успешно, а в оболочке появится следующий вывод:</p><pre><code>Spike
spike@gmail.com
A Message

Data received. Now redirecting  ...
</code></pre><p>После отображения принятых данных в оболочке функция представления перенаправит пользователя по адресу <code>/contact/</code>. В этот момент должна отображаться пустая форма без ошибок валидации так, будто пользователь впервые открыл <code>/contact/</code> с помощью запроса GET.</p><noindex><div class="clear"></div><div id="yandex_rtb_R-A-1311574-8"></div><div class="clear"></div><br></noindex><p>Рекомендуется отображать обратную связь пользователю после успешной отправки. Во Flask это делается с помощью всплывающих сообщений.</p><h2 id="всплывающие-сообщения"><span class="ez-toc-section" id="%D0%92%D1%81%D0%BF%D0%BB%D1%8B%D0%B2%D0%B0%D1%8E%D1%89%D0%B8%D0%B5-%D1%81%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D1%8F"></span>Всплывающие сообщения<span class="ez-toc-section-end"></span></h2><p>Всплывающие сообщения — еще одна из тех функций, которые зависят от секретного ключа. Он необходим, потому что сообщения хранятся в сессиях. Сессиям во Flask будет посвящен отдельный урок. Поскольку в этом уроке секретный ключ уже был настроен, можно двигаться дальше.</p><p>Для отображения сообщения используется функция <code>flash()</code> из пакета <code>flask</code>. Функция <code>flash()</code> принимает два аргумента: сообщение и категория (опционально). Категория указывает на тип сообщения: <code>_success_</code>, <code>_error_</code>, <code>_warning_</code> и так далее. Категория может быть использована в шаблоне, чтобы определить тип сообщения.</p><p>Снова откроем <code>main2.py</code>, чтобы добавить <code>flash(“Message Received”, “success”)</code> прямо перед вызовом <code>redirect()</code> в функции представления <code>contact()</code>:</p><pre class=" language-py"><code class="prism language-py"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span> flash
<span class="token comment">#...</span>
	<span class="token comment"># здесь логика базы данных</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nData received. Now redirecting ..."</span><span class="token punctuation">)</span>
	flash<span class="token punctuation">(</span><span class="token string">"Message Received"</span><span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'contact'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'contact.html'</span><span class="token punctuation">,</span> form<span class="token operator">=</span>form<span class="token punctuation">)</span>
</code></pre><p>Сообщение, заданное с помощью функции <code>flash()</code>, будет доступно только последующему запросу, а потом удалится.</p><p>Это только настройка сообщения. Для его отображения нужно поменять также шаблон.</p><p>Для этого нужно открыть файл <code>contact.html</code> и изменить его следующим образом:</p><p><a href="https://pythonru.com/uroki/7-osnovy-shablonizatora-jinja" data-wpel-link="internal" target="_self" rel="noopener">Jinja</a> предлагает функцию <code>get_flashed_messages()</code>, которая возвращает список активных сообщений без категории. Чтобы получить их вместе с категорией нужно передать <code>with_category=True</code> при вызове <code>get_flashed_messages()</code>. Когда значение <code>with_categories</code> – <code>True</code>, <code>get_flashed_messages()</code> вернет список кортежей формы <code>(category, message)</code>.</p><p>После этих изменений следует открыть <code>https://localhost:5000/contact</code> снова. Заполнить форму и нажать <code>Submit</code>. Сообщение об успешной отправке отобразится в верхней части формы.</p><p><img width="329" height="459" decoding="async" class="aligncenter" title="Успешная отправка формы во Flask" src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20329%20459'%3E%3C/svg%3E" alt="Успешная отправка формы во Flask" data-lazy-src="https://pythonru.com/wp-content/uploads/2019/05/uspeshnaya-otpravka-formy-vo-flask.png" /><noscript><img width="329" height="459" decoding="async" class="aligncenter" title="Успешная отправка формы во Flask" src="https://pythonru.com/wp-content/uploads/2019/05/uspeshnaya-otpravka-formy-vo-flask.png" alt="Успешная отправка формы во Flask" /></noscript></p></div></p></index><div class="td-w-reb td-w-reb-id-content_bottom  td_uid_5_6362161f21731_rand td_block_template_17"><div class="recomendation-feed-bottom"><h3>Обучение с трудоустройством</h3><div class="td-block-row"><div class="td-block-span6"><a href="https://pythonru.com/go/profession-python-1020" onmouseup="yaCounter52113229.reachGoal('rec-bottom-1')" target="_blank" class="rec-banner" style="background-color:#60B3FF;"><div class="mark">⟶</div><div class="flex-row"><div class="image"><img width="92" height="92" src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%2092%2092'%3E%3C/svg%3E" alt="Python-разработчик" data-lazy-src="https://pythonru.com/wp-content/uploads/2021/06/sb-rec-pd.png"><noscript><img width="92" height="92" src="https://pythonru.com/wp-content/uploads/2021/06/sb-rec-pd.png" alt="Python-разработчик"></noscript></div><div class="banner-content"><div class="tag">| Программирование</div><div class="title">Python-разработчик</div><div class="price">145 440 ₽</div><div class="min-price">4 692 ₽/мес.</div></div></div></a></div><div class="td-block-span6"><a href="https://pythonru.com/go/profession-data-scientist-1020" onmouseup="yaCounter52113229.reachGoal('rec-bottom-2')" target="_blank" class="rec-banner" style="background-color:#FBF2E7;"><div class="mark">⟶</div><div class="flex-row"><div class="image"><img width="92" height="92" src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%2092%2092'%3E%3C/svg%3E" alt="Data Scientist" data-lazy-src="https://pythonru.com/wp-content/uploads/2021/06/sb-rec-ds.png"><noscript><img width="92" height="92" src="https://pythonru.com/wp-content/uploads/2021/06/sb-rec-ds.png" alt="Data Scientist"></noscript></div><div class="banner-content"><div class="tag">| Data Science</div><div class="title">Data Scientist</div><div class="price">172 800 ₽</div><div class="min-price">5 574 ₽/мес.</div></div></div></a></div></div><div class="td-block-row"><div class="td-block-span6"><a href="https://pythonru.com/go/profession-fullstack-0121" onmouseup="yaCounter52113229.reachGoal('rec-bottom-3')" target="_blank" class="rec-banner" style="background-color:#67F9B8;"><div class="mark">⟶</div><div class="flex-row"><div class="image"><img width="92" height="92" src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%2092%2092'%3E%3C/svg%3E" alt="Fullstack-разработчик на Python" data-lazy-src="https://pythonru.com/wp-content/uploads/2021/06/sb-rec-fsp.png"><noscript><img width="92" height="92" src="https://pythonru.com/wp-content/uploads/2021/06/sb-rec-fsp.png" alt="Fullstack-разработчик на Python"></noscript></div><div class="banner-content"><div class="tag">| Программирование</div><div class="title">Fullstack-разработчик на Python</div><div class="price">145 440 ₽</div><div class="min-price">4 692 ₽/мес.</div></div></div></a></div><div class="td-block-span6"><a href="https://pythonru.com/go/data-analyst-0221" onmouseup="yaCounter52113229.reachGoal('rec-bottom-4')" target="_blank" class="rec-banner" style="background-color:#C3DBFF;"><div class="mark">⟶</div><div class="flex-row"><div class="image"><img width="92" height="92" src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%2092%2092'%3E%3C/svg%3E" alt="Data Scientist: анализ данных" data-lazy-src="https://pythonru.com/wp-content/uploads/2021/06/sb-rec-da.png"><noscript><img width="92" height="92" src="https://pythonru.com/wp-content/uploads/2021/06/sb-rec-da.png" alt="Data Scientist: анализ данных"></noscript></div><div class="banner-content"><div class="tag">| Data Science</div><div class="title">Data Scientist: анализ данных</div><div class="price">95 040 ₽</div><div class="min-price">3 960 ₽/мес.</div></div></div></a></div></div></div></div></div><footer><div class="td-post-source-tags"><ul class="td-tags td-post-small-box clearfix"><li><span>ТЕГИ</span></li><li><a href="https://pythonru.com/tag/flask">Flask</a></li><li><a href="https://pythonru.com/tag/uroki-po-flask-na-russkom">Уроки по Flask на русском</a></li></ul></div><div class="td-post-sharing-bottom"><div id="td_social_sharing_article_bottom" class="td-post-sharing td-ps-bg td-ps-padding td-ps-big td-ps-nogap td-post-sharing-style13 "><div class="td-post-sharing-visible"><a class="td-social-sharing-button td-social-sharing-button-js td-social-network td-social-facebook" href="https://www.facebook.com/sharer.php?u=https%3A%2F%2Fpythonru.com%2Furoki%2F11-rabota-s-formami-vo-flask"><div class="td-social-but-icon"><i class="td-icon-facebook"></i></div><div class="td-social-but-text">Facebook</div> </a><a class="td-social-sharing-button td-social-sharing-button-js td-social-network td-social-telegram" href="https://telegram.me/share/url?url=https://pythonru.com/uroki/11-rabota-s-formami-vo-flask&text=#11 Работа с формами во Flask"><div class="td-social-but-icon"><i class="td-icon-telegram"></i></div><div class="td-social-but-text">Telegram</div> </a><a class="td-social-sharing-button td-social-sharing-button-js td-social-network td-social-twitter" href="https://twitter.com/intent/tweet?text=%2311+%D0%A0%D0%B0%D0%B1%D0%BE%D1%82%D0%B0+%D1%81+%D1%84%D0%BE%D1%80%D0%BC%D0%B0%D0%BC%D0%B8+%D0%B2%D0%BE+Flask&url=https%3A%2F%2Fpythonru.com%2Furoki%2F11-rabota-s-formami-vo-flask&via=PythonRu"><div class="td-social-but-icon"><i class="td-icon-twitter"></i></div><div class="td-social-but-text">Twitter</div> </a><a class="td-social-sharing-button td-social-sharing-button-js td-social-network td-social-vk" href="https://vk.com/share.php?url=https://pythonru.com/uroki/11-rabota-s-formami-vo-flask"><div class="td-social-but-icon"><i class="td-icon-vk"></i></div><div class="td-social-but-text">VK</div> </a><a class="td-social-sharing-button td-social-sharing-button-js td-social-network td-social-whatsapp" href="whatsapp://send?text=#11 Работа с формами во Flask %0A%0A https://pythonru.com/uroki/11-rabota-s-formami-vo-flask"><div class="td-social-but-icon"><i class="td-icon-whatsapp"></i></div><div class="td-social-but-text">WhatsApp</div> </a><a class="td-social-sharing-button td-social-sharing-button-js td-social-network td-social-viber" href="viber://forward?text=#11 Работа с формами во Flask https://pythonru.com/uroki/11-rabota-s-formami-vo-flask"><div class="td-social-but-icon"><i class="td-icon-viber"></i></div><div class="td-social-but-text">Viber</div> </a></div><div class="td-social-sharing-hidden"><ul class="td-pulldown-filter-list"></ul><a class="td-social-sharing-button td-social-handler td-social-expand-tabs" href="#" data-block-uid="td_social_sharing_article_bottom"><div class="td-social-but-icon"><i class="td-icon-plus td-social-expand-tabs-icon"></i></div> </a></div></div></div><div class="author-box-wrap"><div class="desc"><div class="td-author-name author"><span class="fn">Максим</div><div class="td-author-description">Я создал этот блог в 2018 году, чтобы распространять полезные учебные материалы, документации и уроки на русском. На сайте опубликовано множество статей по основам python и библиотекам, уроков для начинающих и примеров написания программ.</div><div class="td-author-social"><span class="td-social-icon-wrap">Мои контакты:</span> <span class="td-social-icon-wrap"> <a target="_blank" rel="nofollow" href="mailto:admin@pythonru.com" title="Почта"> <span class="td-social-name">Почта</span> </a> </span></div><div class="clearfix"></div></div></div> <span class="td-page-meta" itemprop="author" itemscope itemtype="https://schema.org/Person"><meta itemprop="name" content="Максим"><div itemprop="affiliation" itemscope itemtype="https://schema.org/Organization"> <span itemprop="name">Python Q</span> <a href="https://yandex.ru/q/loves/python" itemprop="url">https://yandex.ru/q/loves/python</a> <span itemprop="address ">Online</span></div><span itemprop="affiliation">Python Q</span><span itemprop="description">CEO Pythonru</span><span itemprop="email">admin@pythonru.com</span><span itemprop="image">https://secure.gravatar.com/avatar/b16f253879f7349f64830c64d1da4415?s=96&d=mm&r=g</span><span itemprop="jobTitle">CEO Pythonru</span><span itemprop="knowsAbout">Python</span><span itemprop="name">Александр</span><span itemprop="potentialAction">Редактор</span><a href="https://t.me/cashncarry" itemprop="sameAs">https://t.me/cashncarry</a><a href="https://pythonru.com/" itemprop="url">https://pythonru.com/</a><a href="https://yandex.ru/q/profile/cashnc/" itemprop="sameAs">https://yandex.ru/q/profile/cashnc/</a><span itemprop="worksFor">PythonRu.com</span></span><meta itemprop="datePublished" content="2019-05-11T18:08:07+00:00"><meta itemprop="dateModified" content="2020-03-05T15:52:51+02:00"><meta itemscope itemprop="mainEntityOfPage" itemType="https://schema.org/WebPage" itemid="https://pythonru.com/uroki/11-rabota-s-formami-vo-flask"/><span class="td-page-meta" itemprop="publisher" itemscope itemtype="https://schema.org/Organization"><span class="td-page-meta" itemprop="logo" itemscope itemtype="https://schema.org/ImageObject"><img width="272" height="90" src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20272%2090'%3E%3C/svg%3E" itemprop="contentUrl" data-lazy-src="https://pythonru.com/wp-content/uploads/2018/11/pythonru-272x90.png" /><noscript><img width="272" height="90" src="https://pythonru.com/wp-content/uploads/2018/11/pythonru-272x90.png" itemprop="contentUrl" /></noscript><meta itemprop="url" content="https://pythonru.com/wp-content/uploads/2018/11/pythonru-272x90.png"></span><meta itemprop="name" content="PythonRu"><span itemprop="email">admin@pythonru.com</span><span itemprop="founder">Alex Zabrodin</span><span itemprop="foundingDate">2018-10-26</span><span itemprop="address ">Online</span><span itemprop="knowsAbout">Python, Programming, HTML, CSS, JavaScript</span></span><meta itemprop="headline " content="#11 Работа с формами во Flask"><span class="td-page-meta" itemprop="image" itemscope itemtype="https://schema.org/ImageObject"><meta itemprop="url" content="https://pythonru.com/wp-content/uploads/2019/05/rabota-s-formami-vo-flask.png"><img width="1200" height="562" src="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201200%20562'%3E%3C/svg%3E" itemprop="contentUrl" data-lazy-src="https://pythonru.com/wp-content/uploads/2019/05/rabota-s-formami-vo-flask.png" /><noscript><img width="1200" height="562" src="https://pythonru.com/wp-content/uploads/2019/05/rabota-s-formami-vo-flask.png" itemprop="contentUrl" /></noscript><meta itemprop="width" content="1200"><meta itemprop="height" content="562"></span></footer></article><div class="td_block_wrap td_block_related_posts td_uid_6_6362161f22acd_rand td_with_ajax_pagination td-pb-border-top td_block_template_17"  data-td-block-uid="td_uid_6_6362161f22acd" ><script>var block_td_uid_6_6362161f22acd = new tdBlock();
block_td_uid_6_6362161f22acd.id = "td_uid_6_6362161f22acd";
block_td_uid_6_6362161f22acd.atts = '{"limit":6,"ajax_pagination":"next_prev","live_filter":"cur_post_same_categories","td_ajax_filter_type":"td_custom_related","class":"td_uid_6_6362161f22acd_rand","td_column_number":3,"live_filter_cur_post_id":1192,"live_filter_cur_post_author":"1","block_template_id":"","header_color":"","ajax_pagination_infinite_stop":"","offset":"","td_ajax_preloading":"","td_filter_default_txt":"","td_ajax_filter_ids":"","el_class":"","color_preset":"","border_top":"","css":"","tdc_css":"","tdc_css_class":"td_uid_6_6362161f22acd_rand","tdc_css_class_style":"td_uid_6_6362161f22acd_rand_style"}';
block_td_uid_6_6362161f22acd.td_column_number = "3";
block_td_uid_6_6362161f22acd.block_type = "td_block_related_posts";
block_td_uid_6_6362161f22acd.post_count = "6";; isn't it? Performance optimized by WP Rocket. Learn more: https://wp-rocket.me - Debug: cached@1667372575 -->